//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: Datacore.bt
//   Authors: Travis Law
//   Version: v0.2
//   Purpose: Defines a template for 
//            Star Citizen Datacore files
//  Category: Game
// File Mask: *.dcb
//  ID Bytes: 
//   History: 
//   v0.1 3-18-2021 Travis Law: Initial release
//   v0.2 9-26-2024 Travis Law: Update to handle datacore v6 changes
//------------------------------------------------

// Based off of https://github.com/dolkensp/unp4k/ unforge utility

// 010 File I/O parameters

LittleEndian();

///////////////////////////////////////////////////////////////////////////////
// START: Common Type & Struct Definitions                                   //
///////////////////////////////////////////////////////////////////////////////

// Type definitions

typedef struct bool{
    byte boolVar <format=decimal>;
};

typedef struct header {
    uint32 unknownVar1;
    int32 fileVer;
    uint32 unknownVar2[2];
};

typedef struct typeValueCounts {
    int32 structDefinitionCount;
    int32 propertyDefinitionCount;
    int32 enumDefinitionCount;
    int32 dataDefinitionCount;
    int32 recordDefinitionCount;

    int32 booleanValueCount;
    int32 int8ValueCount;
    int32 int16ValueCount;
    int32 int32ValueCount;
    int32 int64ValueCount;
    int32 uint8ValueCount;
    int32 uint16ValueCount;
    int32 uint32ValueCount;
    int32 uint64ValueCount;

    int32 singleValueCount;
    int32 doubleValueCount;
    int32 guidValueCount;
    int32 stringValueCount;
    int32 localeValueCount;
    int32 enumValueCount;
    int32 strongValueCount;
    int32 weakValueCount;

    int32 referenceValueCount;
    int32 enumOptionCount;
    uint32 textLength;
    uint32 text2Length;
};

typedef struct DFDataMap_Legacy {
    uint16 structCount;
    uint16 structIndex;    
};

typedef struct DFDataMap {
    uint32 structCount;
    uint32 structIndex;
};

typedef struct DFReference {
    uint32 item;
    GUID value;
};

struct DFPointer {
    uint32 structType;
    uint32 index;
};

/// For V5 and below string table lookups, and reference-type lookups in V6
typedef struct {
    uint32 stringOffset <hidden=false>;
} StringWrapper <name=String_Lookup>;

/// For V6 record-type string table lookups
typedef struct {
    uint32 stringOffset <hidden=false>;
} StringWrapper2 <name=String_Lookup2>;

string String_Lookup( StringWrapper& data )
{
    return ReadString(textStartOffset + data.stringOffset);
}

string String_Lookup2( StringWrapper2& data )
{
    if( headerInfo.fileVer >= 6) {
        return ReadString(textStartOffset2 + data.stringOffset);
    } else {
        return ReadString(textStartOffset + data.stringOffset);
    }
}

///////////////////////////////////////////////////////////////////////////////
// END: Common Type & Struct Definitions                                     //
///////////////////////////////////////////////////////////////////////////////

// Header

header          headerInfo                                     <bgcolor=cLtBlue>;
typeValueCounts typeValC                                       <bgcolor=cLtGreen>;

// Complex types

///////////////////////////////////////////////////////////////////////////////
// START: DFStructCollection                                                 //
///////////////////////////////////////////////////////////////////////////////


typedef struct {
    uint32 nameOffset          <hidden=false>;
    uint32 parentTypeIndex     <hidden=false>;
    uint16 attributeCount      <hidden=false>;
    uint16 firstAttributeIndex <hidden=false>;
    uint32 nodeType            <hidden=false>;
} DFStruct <name=DFStruct_Name>;

// Collection to wrap the array, as optimize must be set to false
struct DFStructCollection {
    DFStruct StructDefinition[typeValC.structDefinitionCount] <bgcolor=cLtRed, optimize=false>;
} DFStructs;

string DFStruct_Name( DFStruct &data )
{
    if( headerInfo.fileVer >= 6) {
        return ReadString(textStartOffset2 + data.nameOffset);
    } else {
        return ReadString(textStartOffset + data.nameOffset);
    }
}

///////////////////////////////////////////////////////////////////////////////
// End: DFStructCollection                                                   //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// START: DFPropertyCollection                                                 //
///////////////////////////////////////////////////////////////////////////////

typedef struct {
    uint32 nameOffset     <hidden=false>;
    uint16 structIndex    <hidden=false>;
    uint16 dataType       <hidden=false>;
    uint16 conversionType <hidden=false>;
    uint16 padding        <hidden=false>;
} DFProperty <name=DFProperty_Name>;

// Collection to wrap the array, as optimize must be set to false
struct DFPropertyCollection {
    DFProperty PropertyDefinition[typeValC.propertyDefinitionCount] <bgcolor=cLtBlue, optimize=false>;
} DFProperties;

string DFProperty_Name( DFProperty &data )
{
    if( headerInfo.fileVer >= 6) {
        return ReadString(textStartOffset2 + data.nameOffset);
    } else {
        return ReadString(textStartOffset + data.nameOffset);
    }
}

///////////////////////////////////////////////////////////////////////////////
// End: DFPropertyCollection                                                   //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// START: DFEnumCollection                                                   //
///////////////////////////////////////////////////////////////////////////////

// Fake/virtual node for each enum option
typedef struct (uint32 name, uint16 option) {
    local uint32 nameOffset  = name;
    local uint16 optionIndex = option;
} DFEnumValue <name=DFEnumValue_Name>;

// Enum Definition
typedef struct {
    uint32 nameOffset       <hidden=false>;
    uint16 valueCount       <hidden=false>;
    uint16 firstOptionIndex <hidden=false>;

    local uint16 i          <hidden=true>;
    local uint16 color      <hidden=true>;
    for (i = 0; i < valueCount; i++)
    {
        DFEnumValue value (nameOffset, firstOptionIndex + i);
    }
} DFEnum <name=DFEnum_Name>;

// Collection to wrap the array, as optimize must be set to false
struct DFEnumCollection {
    DFEnum EnumDefinition[typeValC.enumDefinitionCount] <bgcolor=cLtGreen, optimize=false>;
} DFEnums;

string DFEnum_Name( DFEnum &data )
{
    if( headerInfo.fileVer >= 6) {
        return ReadString(textStartOffset2 + data.nameOffset);
    } else {
        return ReadString(textStartOffset + data.nameOffset);
    }
}

string DFEnumValue_Name( DFEnumValue &data )
{
    return String_Lookup2(EnumOptionVals.EnumOptDefinition[data.optionIndex]);
}

///////////////////////////////////////////////////////////////////////////////
// End: DFEnumCollection                                                     //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// START: DFDataMapCollection                                                //
///////////////////////////////////////////////////////////////////////////////

/// TODO: Datamap logic?

DFDataMap       DataMapVals[typeValC.dataDefinitionCount]      <bgcolor=cLtRed>;

///////////////////////////////////////////////////////////////////////////////
// End: DFDataMapCollection                                                  //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// START: DFRecordCollection                                                 //
///////////////////////////////////////////////////////////////////////////////

typedef struct {
    uint32 nameOffset            <hidden=false>;
    
    //(!isLegacy) {uint32 fileNameOffset; }
    
    StringWrapper fileNameOffset <hidden=false>;
    uint32 structIndex           <hidden=false>;

    GUID hash                    <hidden=false>;

    uint16 varientIndex          <hidden=false>;
    uint16 otherIndex            <hidden=false>;
} DFRecord <name=DFRecord_Name>;

// Collection to wrap the array, as optimize must be set to false
struct DFRecordCollection {
    DFRecord RecordDefinition[typeValC.recordDefinitionCount] <bgcolor=cLtBlue, optimize=false>;
} DFRecords;

string DFRecord_Name( DFRecord &data )
{
    if( headerInfo.fileVer >= 6) {
        return ReadString(textStartOffset2 + data.nameOffset);
    } else {
        return ReadString(textStartOffset + data.nameOffset);
    }
}

///////////////////////////////////////////////////////////////////////////////
// End: DFRecordCollection                                                   //
///////////////////////////////////////////////////////////////////////////////

//Simple types

byte            int8Vals[typeValC.int8ValueCount]              <bgcolor=cLtGreen, format=decimal>;
int16           int16Vals[typeValC.int16ValueCount]            <bgcolor=cLtRed>;
int32           int32Vals[typeValC.int32ValueCount]            <bgcolor=cLtGray>;
int64           int64Vals[typeValC.int64ValueCount]            <bgcolor=cLtBlue>;
ubyte           uint8Vals[typeValC.uint8ValueCount]            <bgcolor=cLtGreen, format=decimal>;
uint16          uint16Vals[typeValC.uint16ValueCount]          <bgcolor=cLtRed>;
uint32          uint32Vals[typeValC.uint32ValueCount]          <bgcolor=cLtBlue>;
uint64          uint64Vals[typeValC.uint64ValueCount]          <bgcolor=cLtGreen>;
bool            boolVals[typeValC.booleanValueCount]           <bgcolor=cLtRed>;
float           singleVals[typeValC.singleValueCount]          <bgcolor=cLtBlue>;
double          doubleVals[typeValC.doubleValueCount]          <bgcolor=cLtGreen>;
GUID            GUIDVals[typeValC.guidValueCount]              <bgcolor=cLtRed>;

// String referencing types

struct StringValCollection {
    StringWrapper StringDefinition[typeValC.stringValueCount] <bgcolor=cLtBlue, optimize=false>;
} StringVals;

struct LocaleValCollection {
    StringWrapper LocaleDefinition[typeValC.localeValueCount] <bgcolor=cLtGreen, optimize=false>;
} LocaleVals;

struct EnumValCollection {
    StringWrapper EnumDefinition[typeValC.enumValueCount] <bgcolor=cLtRed, optimize=false>;
} EnumVals;

//Pointer types

DFPointer       strongVals[typeValC.strongValueCount]          <bgcolor=cLtBlue>;
DFPointer       weakVals[typeValC.weakValueCount]              <bgcolor=cLtGreen>;

//Misc types

DFReference     referenceVals[typeValC.referenceValueCount]    <bgcolor=cLtRed>;

struct EnumOptionValCollection {
    StringWrapper2 EnumOptDefinition[typeValC.enumOptionCount] <bgcolor=cLtBlue, optimize=false>;
} EnumOptionVals;

///////////////////////////////////////////////////////////////////////////////
// START: String Tables                                                      //
///////////////////////////////////////////////////////////////////////////////

typedef struct {
    string value;
} StrValue <name=StrValue_Name>;

string StrValue_Name( StrValue &data )
{
    return data.value;
}

local int textStartOffset = FTell();
local int pos = FTell();
local int textEndOffset = FTell() + typeValC.textLength;

struct stringTable {
    while(pos < textEndOffset) {
        StrValue strVal;
        pos = FTell();
    }
} strTable <bgcolor=cLtBlue>;

local int textStartOffset2 = FTell();
pos = FTell();
local int textEndOffset2 = FTell() + typeValC.text2Length;

struct stringTable2 {
    while(pos < textEndOffset2) {
        StrValue strVal;
        pos = FTell();
    }
} strTable2 <bgcolor=cLtRed>;

///////////////////////////////////////////////////////////////////////////////
// END: String Tables                                                        //
///////////////////////////////////////////////////////////////////////////////

// TODO

pos = FTell();
local int fileSize = FileSize();//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: Datacore.bt
//   Authors: Travis Law
//   Version: v0.2
//   Purpose: Defines a template for 
//            Star Citizen Datacore files
//  Category: Game
// File Mask: *.dcb
//  ID Bytes: 
//   History: 
//   v0.1 3-18-2021 Travis Law: Initial release
//   v0.2 9-26-2024 Travis Law: Update to handle datacore v6 changes
//------------------------------------------------

// Based off of https://github.com/dolkensp/unp4k/ unforge utility

// 010 File I/O parameters

LittleEndian();

///////////////////////////////////////////////////////////////////////////////
// START: Common Type & Struct Definitions                                   //
///////////////////////////////////////////////////////////////////////////////

// Type definitions

typedef struct bool{
    byte boolVar <format=decimal>;
};

typedef struct header {
    uint32 unknownVar1;
    int32 fileVer;
    uint32 unknownVar2[2];
};

typedef struct typeValueCounts {
    int32 structDefinitionCount;
    int32 propertyDefinitionCount;
    int32 enumDefinitionCount;
    int32 dataDefinitionCount;
    int32 recordDefinitionCount;

    int32 booleanValueCount;
    int32 int8ValueCount;
    int32 int16ValueCount;
    int32 int32ValueCount;
    int32 int64ValueCount;
    int32 uint8ValueCount;
    int32 uint16ValueCount;
    int32 uint32ValueCount;
    int32 uint64ValueCount;

    int32 singleValueCount;
    int32 doubleValueCount;
    int32 guidValueCount;
    int32 stringValueCount;
    int32 localeValueCount;
    int32 enumValueCount;
    int32 strongValueCount;
    int32 weakValueCount;

    int32 referenceValueCount;
    int32 enumOptionCount;
    uint32 textLength;
    uint32 text2Length;
};

typedef struct DFDataMap_Legacy {
    uint16 structCount;
    uint16 structIndex;    
};

typedef struct DFDataMap {
    uint32 structCount;
    uint32 structIndex;
};

typedef struct DFReference {
    uint32 item;
    GUID value;
};

struct DFPointer {
    uint32 structType;
    uint32 index;
};

/// For V5 and below string table lookups, and reference-type lookups in V6
typedef struct {
    uint32 stringOffset <hidden=false>;
} StringWrapper <name=String_Lookup>;

/// For V6 record-type string table lookups
typedef struct {
    uint32 stringOffset <hidden=false>;
} StringWrapper2 <name=String_Lookup2>;

string String_Lookup( StringWrapper& data )
{
    return ReadString(textStartOffset + data.stringOffset);
}

string String_Lookup2( StringWrapper2& data )
{
    if( headerInfo.fileVer >= 6) {
        return ReadString(textStartOffset2 + data.stringOffset);
    } else {
        return ReadString(textStartOffset + data.stringOffset);
    }
}

///////////////////////////////////////////////////////////////////////////////
// END: Common Type & Struct Definitions                                     //
///////////////////////////////////////////////////////////////////////////////

// Header

header          headerInfo                                     <bgcolor=cLtBlue>;
typeValueCounts typeValC                                       <bgcolor=cLtGreen>;

// Complex types

///////////////////////////////////////////////////////////////////////////////
// START: DFStructCollection                                                 //
///////////////////////////////////////////////////////////////////////////////


typedef struct {
    uint32 nameOffset          <hidden=false>;
    uint32 parentTypeIndex     <hidden=false>;
    uint16 attributeCount      <hidden=false>;
    uint16 firstAttributeIndex <hidden=false>;
    uint32 nodeType            <hidden=false>;
} DFStruct <name=DFStruct_Name>;

// Collection to wrap the array, as optimize must be set to false
struct DFStructCollection {
    DFStruct StructDefinition[typeValC.structDefinitionCount] <bgcolor=cLtRed, optimize=false>;
} DFStructs;

string DFStruct_Name( DFStruct &data )
{
    if( headerInfo.fileVer >= 6) {
        return ReadString(textStartOffset2 + data.nameOffset);
    } else {
        return ReadString(textStartOffset + data.nameOffset);
    }
}

///////////////////////////////////////////////////////////////////////////////
// End: DFStructCollection                                                   //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// START: DFPropertyCollection                                                 //
///////////////////////////////////////////////////////////////////////////////

typedef struct {
    uint32 nameOffset     <hidden=false>;
    uint16 structIndex    <hidden=false>;
    uint16 dataType       <hidden=false>;
    uint16 conversionType <hidden=false>;
    uint16 padding        <hidden=false>;
} DFProperty <name=DFProperty_Name>;

// Collection to wrap the array, as optimize must be set to false
struct DFPropertyCollection {
    DFProperty PropertyDefinition[typeValC.propertyDefinitionCount] <bgcolor=cLtBlue, optimize=false>;
} DFProperties;

string DFProperty_Name( DFProperty &data )
{
    if( headerInfo.fileVer >= 6) {
        return ReadString(textStartOffset2 + data.nameOffset);
    } else {
        return ReadString(textStartOffset + data.nameOffset);
    }
}

///////////////////////////////////////////////////////////////////////////////
// End: DFPropertyCollection                                                   //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// START: DFEnumCollection                                                   //
///////////////////////////////////////////////////////////////////////////////

// Fake/virtual node for each enum option
typedef struct (uint32 name, uint16 option) {
    local uint32 nameOffset  = name;
    local uint16 optionIndex = option;
} DFEnumValue <name=DFEnumValue_Name>;

// Enum Definition
typedef struct {
    uint32 nameOffset       <hidden=false>;
    uint16 valueCount       <hidden=false>;
    uint16 firstOptionIndex <hidden=false>;

    local uint16 i          <hidden=true>;
    local uint16 color      <hidden=true>;
    for (i = 0; i < valueCount; i++)
    {
        DFEnumValue value (nameOffset, firstOptionIndex + i);
    }
} DFEnum <name=DFEnum_Name>;

// Collection to wrap the array, as optimize must be set to false
struct DFEnumCollection {
    DFEnum EnumDefinition[typeValC.enumDefinitionCount] <bgcolor=cLtGreen, optimize=false>;
} DFEnums;

string DFEnum_Name( DFEnum &data )
{
    if( headerInfo.fileVer >= 6) {
        return ReadString(textStartOffset2 + data.nameOffset);
    } else {
        return ReadString(textStartOffset + data.nameOffset);
    }
}

string DFEnumValue_Name( DFEnumValue &data )
{
    return String_Lookup2(EnumOptionVals.EnumOptDefinition[data.optionIndex]);
}

///////////////////////////////////////////////////////////////////////////////
// End: DFEnumCollection                                                     //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// START: DFDataMapCollection                                                //
///////////////////////////////////////////////////////////////////////////////

/// TODO: Datamap logic?

DFDataMap       DataMapVals[typeValC.dataDefinitionCount]      <bgcolor=cLtRed>;

///////////////////////////////////////////////////////////////////////////////
// End: DFDataMapCollection                                                  //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// START: DFRecordCollection                                                 //
///////////////////////////////////////////////////////////////////////////////

typedef struct {
    uint32 nameOffset            <hidden=false>;
    
    //(!isLegacy) {uint32 fileNameOffset; }
    
    StringWrapper fileNameOffset <hidden=false>;
    uint32 structIndex           <hidden=false>;

    GUID hash                    <hidden=false>;

    uint16 varientIndex          <hidden=false>;
    uint16 otherIndex            <hidden=false>;
} DFRecord <name=DFRecord_Name>;

// Collection to wrap the array, as optimize must be set to false
struct DFRecordCollection {
    DFRecord RecordDefinition[typeValC.recordDefinitionCount] <bgcolor=cLtBlue, optimize=false>;
} DFRecords;

string DFRecord_Name( DFRecord &data )
{
    if( headerInfo.fileVer >= 6) {
        return ReadString(textStartOffset2 + data.nameOffset);
    } else {
        return ReadString(textStartOffset + data.nameOffset);
    }
}

///////////////////////////////////////////////////////////////////////////////
// End: DFRecordCollection                                                   //
///////////////////////////////////////////////////////////////////////////////

//Simple types

byte            int8Vals[typeValC.int8ValueCount]              <bgcolor=cLtGreen, format=decimal>;
int16           int16Vals[typeValC.int16ValueCount]            <bgcolor=cLtRed>;
int32           int32Vals[typeValC.int32ValueCount]            <bgcolor=cLtGray>;
int64           int64Vals[typeValC.int64ValueCount]            <bgcolor=cLtBlue>;
ubyte           uint8Vals[typeValC.uint8ValueCount]            <bgcolor=cLtGreen, format=decimal>;
uint16          uint16Vals[typeValC.uint16ValueCount]          <bgcolor=cLtRed>;
uint32          uint32Vals[typeValC.uint32ValueCount]          <bgcolor=cLtBlue>;
uint64          uint64Vals[typeValC.uint64ValueCount]          <bgcolor=cLtGreen>;
bool            boolVals[typeValC.booleanValueCount]           <bgcolor=cLtRed>;
float           singleVals[typeValC.singleValueCount]          <bgcolor=cLtBlue>;
double          doubleVals[typeValC.doubleValueCount]          <bgcolor=cLtGreen>;
GUID            GUIDVals[typeValC.guidValueCount]              <bgcolor=cLtRed>;

// String referencing types

struct StringValCollection {
    StringWrapper StringDefinition[typeValC.stringValueCount] <bgcolor=cLtBlue, optimize=false>;
} StringVals;

struct LocaleValCollection {
    StringWrapper LocaleDefinition[typeValC.localeValueCount] <bgcolor=cLtGreen, optimize=false>;
} LocaleVals;

struct EnumValCollection {
    StringWrapper EnumDefinition[typeValC.enumValueCount] <bgcolor=cLtRed, optimize=false>;
} EnumVals;

//Pointer types

DFPointer       strongVals[typeValC.strongValueCount]          <bgcolor=cLtBlue>;
DFPointer       weakVals[typeValC.weakValueCount]              <bgcolor=cLtGreen>;

//Misc types

DFReference     referenceVals[typeValC.referenceValueCount]    <bgcolor=cLtRed>;

struct EnumOptionValCollection {
    StringWrapper2 EnumOptDefinition[typeValC.enumOptionCount] <bgcolor=cLtBlue, optimize=false>;
} EnumOptionVals;

///////////////////////////////////////////////////////////////////////////////
// START: String Tables                                                      //
///////////////////////////////////////////////////////////////////////////////

typedef struct {
    string value;
} StrValue <name=StrValue_Name>;

string StrValue_Name( StrValue &data )
{
    return data.value;
}

local int textStartOffset = FTell();
local int pos = FTell();
local int textEndOffset = FTell() + typeValC.textLength;

struct stringTable {
    while(pos < textEndOffset) {
        StrValue strVal;
        pos = FTell();
    }
} strTable <bgcolor=cLtBlue>;

local int textStartOffset2 = FTell();
pos = FTell();
local int textEndOffset2 = FTell() + typeValC.text2Length;

struct stringTable2 {
    while(pos < textEndOffset2) {
        StrValue strVal;
        pos = FTell();
    }
} strTable2 <bgcolor=cLtRed>;

///////////////////////////////////////////////////////////////////////////////
// END: String Tables                                                        //
///////////////////////////////////////////////////////////////////////////////

// TODO

pos = FTell();
local int fileSize = FileSize();
local int bufLength = fileSize-pos;

byte tempRemainingBuf[bufLength] <bgcolor=cYellow, hidden=true>;
local int bufLength = fileSize-pos;

byte tempRemainingBuf[bufLength] <bgcolor=cYellow, hidden=true>;
